"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./src/lib/firebase/trendGuesserService.ts":
/*!*************************************************!*\
  !*** ./src/lib/firebase/trendGuesserService.ts ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TrendGuesserService: () => (/* binding */ TrendGuesserService)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(pages-dir-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"(pages-dir-browser)/./src/lib/firebase/firebase.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(pages-dir-browser)/./node_modules/uuid/dist/esm-browser/index.js\");\n/* harmony import */ var _mockData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mockData */ \"(pages-dir-browser)/./src/lib/firebase/mockData.ts\");\n// src/lib/firebase/trendGuesserService.ts\n\n\n\n\n// Development mode flag\nconst USE_MOCK_DATA =  true || 0;\nclass TrendGuesserService {\n    // Start a new game with selected category\n    static async startGame(gameId, category, customTerm) {\n        try {\n            // In mock mode, we don't need to check if the game exists\n            if (!USE_MOCK_DATA) {\n                const gameRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'games', gameId.toUpperCase());\n                const gameDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(gameRef);\n                if (!gameDoc.exists()) {\n                    throw new Error('Game does not exist');\n                }\n            } else {\n                console.log('Using mock data for game start');\n            }\n            // Get terms for the selected category\n            let terms = [];\n            if (category === 'custom' && customTerm) {\n                // For custom games, fetch the custom term and related terms\n                terms = await this.fetchCustomTermWithRelated(customTerm);\n            } else {\n                // For predefined categories, fetch terms from the database\n                terms = await this.fetchTermsByCategory(category);\n            }\n            if (terms.length < 2) {\n                throw new Error('Not enough terms available');\n            }\n            // Shuffle the terms\n            const shuffledTerms = this.shuffleTerms(terms);\n            // Initialize game state with first two terms\n            const gameState = {\n                currentRound: 1,\n                knownTerm: shuffledTerms[0],\n                hiddenTerm: shuffledTerms[1],\n                category,\n                started: true,\n                finished: false,\n                usedTerms: [\n                    shuffledTerms[0].id,\n                    shuffledTerms[1].id\n                ],\n                terms: shuffledTerms.slice(2),\n                customTerm: category === 'custom' ? customTerm : undefined\n            };\n            if (!USE_MOCK_DATA) {\n                // Update the game document with new game state\n                const gameRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'games', gameId.toUpperCase());\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(gameRef, {\n                    status: 'active',\n                    '__trendguesser.state': gameState\n                });\n            } else {\n                // In mock mode, we just log what would have happened\n                console.log('Mock: Game started with category:', category);\n                // Store the game state in sessionStorage for mock mode\n                if (true) {\n                    sessionStorage.setItem(\"game_\".concat(gameId), JSON.stringify({\n                        status: 'active',\n                        '__trendguesser.state': gameState,\n                        [sessionStorage.getItem('mock_user_uid') || 'mock_user']: {\n                            uid: sessionStorage.getItem('mock_user_uid') || 'mock_user',\n                            name: 'Mock Player',\n                            score: 0\n                        }\n                    }));\n                }\n            }\n        } catch (error) {\n            console.error('Error starting game:', error);\n            if (USE_MOCK_DATA) {\n                console.log('Falling back to mock game state due to error');\n                // Create a basic mock game state\n                return;\n            }\n            throw error;\n        }\n    }\n    // Make a guess (higher or lower)\n    static async makeGuess(gameId, playerUid, isHigher) {\n        try {\n            const gameRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'games', gameId.toUpperCase());\n            const gameDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(gameRef);\n            if (!gameDoc.exists()) {\n                throw new Error('Game does not exist');\n            }\n            const gameData = gameDoc.data();\n            const gameState = gameData['__trendguesser.state'];\n            const player = gameData[playerUid];\n            if (!gameState || !gameState.started || gameState.finished) {\n                throw new Error('Game is not active');\n            }\n            // Check if the guess is correct\n            const isCorrect = isHigher ? gameState.hiddenTerm.volume > gameState.knownTerm.volume : gameState.hiddenTerm.volume < gameState.knownTerm.volume;\n            if (isCorrect) {\n                // Correct guess - prepare next round\n                const nextRound = gameState.currentRound + 1;\n                const newPlayerScore = (player.score || 0) + 1;\n                // Update player score\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(gameRef, {\n                    [\"\".concat(playerUid, \".score\")]: newPlayerScore\n                });\n                // If we have more terms, set up next round\n                if (gameState.terms.length > 0) {\n                    const nextTerm = gameState.terms[0];\n                    const remainingTerms = gameState.terms.slice(1);\n                    const updatedState = {\n                        ...gameState,\n                        currentRound: nextRound,\n                        knownTerm: gameState.hiddenTerm,\n                        hiddenTerm: nextTerm,\n                        usedTerms: [\n                            ...gameState.usedTerms,\n                            nextTerm.id\n                        ],\n                        terms: remainingTerms\n                    };\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(gameRef, {\n                        '__trendguesser.state': updatedState\n                    });\n                } else {\n                    // No more terms - player wins by completing all terms\n                    const updatedState = {\n                        ...gameState,\n                        finished: true,\n                        winner: playerUid\n                    };\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(gameRef, {\n                        '__trendguesser.state': updatedState,\n                        status: 'finished'\n                    });\n                    // Update high score if needed\n                    await this.updateHighScore(playerUid, gameState.category, newPlayerScore);\n                }\n                return true;\n            } else {\n                // Incorrect guess - game over\n                const updatedState = {\n                    ...gameState,\n                    finished: true\n                };\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(gameRef, {\n                    '__trendguesser.state': updatedState,\n                    status: 'finished'\n                });\n                // Update high score if needed\n                await this.updateHighScore(playerUid, gameState.category, player.score || 0);\n                return false;\n            }\n        } catch (error) {\n            console.error('Error making guess:', error);\n            throw error;\n        }\n    }\n    // End the game and update high scores\n    static async endGame(gameId, playerUid, finalScore) {\n        try {\n            const gameRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'games', gameId.toUpperCase());\n            const gameDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(gameRef);\n            if (!gameDoc.exists()) {\n                throw new Error('Game does not exist');\n            }\n            const gameData = gameDoc.data();\n            const gameState = gameData['__trendguesser.state'];\n            if (!gameState) {\n                throw new Error('No game state found');\n            }\n            // Only update if game was actually started\n            if (gameState.started) {\n                // Mark game as finished\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(gameRef, {\n                    status: 'finished',\n                    '__trendguesser.state': {\n                        ...gameState,\n                        finished: true\n                    }\n                });\n                // Update high score if needed\n                await this.updateHighScore(playerUid, gameState.category, finalScore);\n            }\n        } catch (error) {\n            console.error('Error ending game:', error);\n            throw error;\n        }\n    }\n    // Create a new game session\n    static async createGame(createdBy, playerName) {\n        try {\n            // Generate a short 6-character game ID (uppercase)\n            const gameId = this.generateGameId();\n            if (USE_MOCK_DATA) {\n                console.log('Using mock data for game creation');\n                // Return the game ID without actually writing to Firestore\n                return gameId;\n            }\n            const gameRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'games', gameId);\n            // Initialize player data\n            const playerData = {\n                uid: createdBy,\n                name: playerName || 'Player',\n                score: 0\n            };\n            // Initial game data\n            const gameData = {\n                id: gameId,\n                createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)(),\n                createdBy,\n                gameType: 'trendguesser',\n                status: 'waiting',\n                [createdBy]: playerData\n            };\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(gameRef, gameData);\n            return gameId;\n        } catch (error) {\n            console.error('Error creating game:', error);\n            if (USE_MOCK_DATA) {\n                console.log('Falling back to mock data due to error');\n                return this.generateGameId();\n            }\n            throw error;\n        }\n    }\n    // Fetch leaderboard for a category\n    static async getLeaderboard(category) {\n        try {\n            if (USE_MOCK_DATA) {\n                console.log('Using mock data for leaderboard');\n                // Sort and filter the mock leaderboard based on the requested category\n                return _mockData__WEBPACK_IMPORTED_MODULE_2__.sampleLeaderboard.filter((player)=>player.highScores && player.highScores[category]).sort((a, b)=>{\n                    var _a_highScores, _b_highScores;\n                    const scoreA = ((_a_highScores = a.highScores) === null || _a_highScores === void 0 ? void 0 : _a_highScores[category]) || 0;\n                    const scoreB = ((_b_highScores = b.highScores) === null || _b_highScores === void 0 ? void 0 : _b_highScores[category]) || 0;\n                    return scoreB - scoreA;\n                }).slice(0, 10);\n            }\n            const leaderboardRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'leaderboard');\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(leaderboardRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('category', '==', category), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)('score', 'desc'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(10));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const leaderboard = [];\n            querySnapshot.forEach((doc)=>{\n                const data = doc.data();\n                leaderboard.push({\n                    uid: data.uid,\n                    name: data.name,\n                    score: data.score,\n                    highScores: data.highScores\n                });\n            });\n            return leaderboard;\n        } catch (error) {\n            console.error('Error fetching leaderboard:', error);\n            if (USE_MOCK_DATA) {\n                console.log('Falling back to mock data due to error');\n                return _mockData__WEBPACK_IMPORTED_MODULE_2__.sampleLeaderboard.slice(0, 10);\n            }\n            throw error;\n        }\n    }\n    // Helper methods\n    static async updateHighScore(playerUid, category, score) {\n        try {\n            const playerRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'players', playerUid);\n            const playerDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(playerRef);\n            if (playerDoc.exists()) {\n                var _playerData_highScores;\n                const playerData = playerDoc.data();\n                const currentHighScore = ((_playerData_highScores = playerData.highScores) === null || _playerData_highScores === void 0 ? void 0 : _playerData_highScores[category]) || 0;\n                if (score > currentHighScore) {\n                    // Update player's high score for this category\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc)(playerRef, {\n                        [\"highScores.\".concat(category)]: score\n                    });\n                    // Also update leaderboard if score is significant\n                    if (score > 5) {\n                        const leaderboardRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'leaderboard', \"\".concat(category, \"_\").concat(playerUid));\n                        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(leaderboardRef, {\n                            uid: playerUid,\n                            name: playerData.name || 'Unknown Player',\n                            score,\n                            category,\n                            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp)()\n                        }, {\n                            merge: true\n                        });\n                    }\n                }\n            }\n        } catch (error) {\n            console.error('Error updating high score:', error);\n        // Don't throw, just log - this is a non-critical operation\n        }\n    }\n    static async fetchTermsByCategory(category) {\n        try {\n            if (USE_MOCK_DATA) {\n                console.log('Using mock data for search terms');\n                if (category === 'everything') {\n                    // Return all sample terms\n                    return _mockData__WEBPACK_IMPORTED_MODULE_2__.sampleSearchTerms;\n                } else if (category === 'latest') {\n                    // Return terms sorted by timestamp\n                    return [\n                        ..._mockData__WEBPACK_IMPORTED_MODULE_2__.sampleSearchTerms\n                    ].sort(()=>Math.random() - 0.5);\n                } else {\n                    // Filter by category\n                    const filteredTerms = _mockData__WEBPACK_IMPORTED_MODULE_2__.sampleSearchTerms.filter((term)=>term.category === category);\n                    return filteredTerms.length > 0 ? filteredTerms : _mockData__WEBPACK_IMPORTED_MODULE_2__.sampleSearchTerms;\n                }\n            }\n            const termsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'searchTerms');\n            let q;\n            if (category === 'everything') {\n                // For \"everything\" category, get a mix of all categories\n                q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(termsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(50));\n            } else if (category === 'latest') {\n                // For \"latest\", get the most recently added terms\n                q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(termsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)('timestamp', 'desc'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(50));\n            } else {\n                // For specific categories\n                q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(termsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)('category', '==', category), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(50));\n            }\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const terms = [];\n            querySnapshot.forEach((doc)=>{\n                const data = doc.data();\n                terms.push({\n                    ...data,\n                    id: doc.id\n                });\n            });\n            return terms;\n        } catch (error) {\n            console.error('Error fetching terms:', error);\n            if (USE_MOCK_DATA) {\n                console.log('Falling back to mock data due to error');\n                return _mockData__WEBPACK_IMPORTED_MODULE_2__.sampleSearchTerms;\n            }\n            throw error;\n        }\n    }\n    static async fetchCustomTermWithRelated(customTerm) {\n        try {\n            // This would typically call a Firebase Function to get the custom term data\n            // For now, we'll simulate it with a placeholder\n            // First term will be the custom one\n            const customSearchTerm = {\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)(),\n                term: customTerm,\n                volume: Math.floor(Math.random() * 100) + 1,\n                category: 'custom',\n                imageUrl: \"https://source.unsplash.com/featured/?\".concat(encodeURIComponent(customTerm)),\n                timestamp: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now()\n            };\n            // Then get some related terms from the database (random for now)\n            const termsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, 'searchTerms');\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(termsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit)(20));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const terms = [\n                customSearchTerm\n            ];\n            querySnapshot.forEach((doc)=>{\n                const data = doc.data();\n                terms.push({\n                    ...data,\n                    id: doc.id\n                });\n            });\n            return terms;\n        } catch (error) {\n            console.error('Error fetching custom term:', error);\n            throw error;\n        }\n    }\n    static shuffleTerms(terms) {\n        const shuffled = [\n            ...terms\n        ];\n        for(let i = shuffled.length - 1; i > 0; i--){\n            const j = Math.floor(Math.random() * (i + 1));\n            [shuffled[i], shuffled[j]] = [\n                shuffled[j],\n                shuffled[i]\n            ];\n        }\n        return shuffled;\n    }\n    static generateGameId() {\n        // Generate a 6-character alphanumeric code (uppercase)\n        const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'; // Removed confusable characters\n        let result = '';\n        for(let i = 0; i < 6; i++){\n            result += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return result;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/lib/firebase/trendGuesserService.ts\n"));

/***/ })

});